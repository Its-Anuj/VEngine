add_library(VEngine Src/Layers/LayerStack.cpp Src/UUID/UUID.cpp Src/Application.cpp Src/Window/Window.cpp Src/Rendering/Renderer.cpp Src/Input/Input.cpp)

add_subdirectory(Libs/glfw)
add_subdirectory(Src/Rendering)

include_directories("Src/Layers")
include_directories("Src/UUID")
include_directories("Src/Window")
include_directories("Src/Events")
include_directories("Src/Input")
include_directories("Src/Profiling")
include_directories("Src/Rendering/")
include_directories("Src/Rendering/Vulkan")
include_directories("Src/")
include_directories("Libs/glfw/include/GLFW/")

include_directories("C:/VulkanSDK/1.3.275.0/Include/vulkan")
include_directories("C:/VulkanSDK/1.3.275.0/Include/")
include_directories("C:/VulkanSDK/1.3.275.0/Include/vk_video")

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_compile_definitions(VEngine PRIVATE VENGINE_DEBUG_BUILD)
    message("[ENGINE] Debug build enabled")
endif()
if(CMAKE_BUILD_TYPE STREQUAL "Release")
    target_compile_definitions(VEngine PRIVATE VENGINE_RELEASE_BUILD)
    message("[ENGINE] Release build enabled")
endif()
if (MINGW)
    message(MINGW)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++")
endif()
# Add precompiled header (for example "pch.h")
target_precompile_headers(VEngine PRIVATE Src/VePCH.h)